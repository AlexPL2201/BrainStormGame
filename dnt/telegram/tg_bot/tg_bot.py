import asyncio
import json
import random
import time

from django.contrib import auth
from typing import List
from telethon.sync import TelegramClient, events
from telethon.tl.custom import Button

from authapp.models import AuthUser
from games.models import TYPES as GAMES_TYPES
from games.operations import GameProcessForUser
from questions.models import Question, Answer
from questions.operations import SettingRatingToQuestionByUser, AddNewQuestionByUser
from variables import TG_MENU_START_GAME, TG_MENU_PROFILE, TG_MENU_CREATE_QUESTION, TG_MENU_RATE_QUESTIONS, \
    GAME_MAX_PLAYERS, GAME_QUESTIONS_COUNT, TG_LEAVE_QUEUE, TG_EMOTIONS_GOOD, TG_EMOTIONS_BAD, GAME_TIME_SHOW_ANSWER, \
    GAME_TIME_TO_ANSWER, GAME_TIME_BEFORE_START

MENU_LIST = [TG_MENU_START_GAME, TG_MENU_PROFILE,
             TG_MENU_CREATE_QUESTION, TG_MENU_RATE_QUESTIONS]
MAIN_MENU = [Button.text(button, resize=True) for button in MENU_LIST]
regular_queue = []


class BotLogic:
    # –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (Custom Keyboard), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def __init__(self, bot: TelegramClient, telegram_id: int, telegram_username: str):
        self.bot = bot
        self.telegram_id = telegram_id
        self.telegram_username = telegram_username

    @staticmethod
    async def _get_answer_from_conv(conv: TelegramClient.conversation, question: str):
        """
        –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
        (–æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ—á–µ—Ç)
        """

        timeout_message = '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ'
        try:
            await conv.send_message(question)
            answer = await conv.get_response()
            return answer.text
        except Exception as e:
            await conv.send_message(timeout_message)

    @staticmethod
    def _press_event(user_id: int) -> events.CallbackQuery:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–∞—Ç–æ–π –≤ –¥–∏–∞–ª–æ–≥–µ
        """
        return events.CallbackQuery(func=lambda e: e.sender_id == user_id)

    @staticmethod
    def _authorize(username: str, password: str) -> bool:
        user = auth.authenticate(username=username, password=password)
        if user:
            return True
        return False

    async def _merge_accounts(self, conv: TelegramClient.conversation) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
        - –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç—É –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π telegram id
        """
        username = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        if username:
            password = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å')
            if password:
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã
                authorized = self._authorize(username=username, password=password)

                if authorized:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—É telegram id
                    current_user = AuthUser.objects.get(username=username)
                    current_user.telegram_id = self.telegram_id
                    current_user.save()
                    await conv.send_message(
                        f'–ê–∫–∫–∞—É–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã: login {current_user.username}, telegram_id {current_user.telegram_id}',
                        buttons=MAIN_MENU)
                else:
                    await conv.send_message(f'–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    async def _create_account(self, conv: TelegramClient.conversation) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ telegram id
        """

        nickname = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫')
        if nickname:
            password = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å')
            if password:
                new_user = AuthUser(telegram_id=self.telegram_id, username=self.telegram_username, nickname=nickname)
                new_user.set_password(password)
                new_user.save()
                await conv.send_message(
                    f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: login {new_user.username}, telegram_id {new_user.telegram_id}',
                    buttons=MAIN_MENU)

    async def send_welcome_back(self):
        await self.bot.send_message(self.telegram_id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', buttons=MAIN_MENU)

    async def create_or_merge_account(self):
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –±–∞–∑–µ telegram id
        –∏–ª–∏ —Å–≤—è–∑–∏ telegram id —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
        """

        async with self.bot.conversation(self.telegram_id) as conv:
            buttons = [Button.inline('–î–∞, —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã', b'merge'),
                       Button.inline('–ù–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', b'create')]
            await conv.send_message('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ?', buttons=buttons)

            try:
                press = await conv.wait_event(self._press_event(self.telegram_id))
                if press.data == b'merge':
                    # —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    await self._merge_accounts(conv)
                elif press.data == b'create':
                    # —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    await self._create_account(conv)
            except Exception as e:
                pass

    async def rate_questions(self, rating_process: SettingRatingToQuestionByUser):

        def get_question_buttons() -> List[Button]:
            """
            –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ inline-–∫–Ω–æ–ø–æ–∫.
            –ò—Ö —Å–æ—Å—Ç–∞–≤ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—á–∞–Ω–∏–π –≤–æ–æ–±—â–µ –∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—á–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            :return:
            """

            # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            question_buttons = [Button.inline('üëç', b'like'),
                                Button.inline('üëé', b'dislike'),
                                Button.inline('üîö', b'cancel')]

            # –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            remarks = rating_process.get_remarks_for_current_question()
            if remarks:
                question_buttons.append(Button.inline(f'üëÄ {len(remarks)}', b'remarks'), )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ (–µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ
            able_to_add_remark = rating_process.ability_to_remark_question()
            if able_to_add_remark:
                question_buttons.append(Button.inline('‚úèÔ∏è', b'add_remark'))

            return question_buttons

        while rating_process.current_question:
            # –ü–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–Ω–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ü–µ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)

            question = rating_process.current_question.question
            answer = rating_process.current_question.answer.answer
            answer_type = rating_process.current_question.answer.subtype.type.name
            answer_subtype = rating_process.current_question.answer.subtype.name

            # –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            question_description_string = f'–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_type}\n–ü–æ–¥—Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_subtype}'

            async with self.bot.conversation(self.telegram_id) as conv:
                await conv.send_message(question_description_string, buttons=get_question_buttons())

                press = await conv.wait_event(self._press_event(self.telegram_id))
                if press.data == b'like':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    rating_process.rate_current_question()
                    rating_process.get_next_question()

                elif press.data == b'dislike':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –∑–∞–±–∏—Ä–∞–µ–º –æ—á–∫–æ –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    rating_process.rate_current_question(bad=True)
                    rating_process.get_next_question()

                elif press.data == b'remarks':
                    # –í—ã–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–º–µ—á–∞–Ω–∏—è –Ω–∞ –æ—Ü–µ–Ω–∫—É
                    for remark in rating_process.get_remarks_for_current_question():
                        remark_text = remark.text
                        remark_buttons = [Button.inline('üëç', b'like_remark'),
                                          Button.inline('üëé', b'dislike_remark'),
                                          Button.inline('üîö', b'cancel_remark')]
                        await conv.send_message(f'–ó–∞–º–µ—á–∞–Ω–∏–µ: {remark_text}', buttons=remark_buttons)

                        press = await conv.wait_event(self._press_event(self.telegram_id))
                        if press.data == b'like_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ –∑–∞–º–µ—á–∞–Ω–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                            rating_process.rate_remark(remark=remark)
                            await conv.send_message('Like –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç')
                            continue
                        elif press.data == b'dislike_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Dislike, –∑–∞–±–∏—Ä–∞–µ–º –æ—á–∫–æ —É –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                            rating_process.rate_remark(remark=remark, bad=True)
                            await conv.send_message('Dislike –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç')
                            continue
                        elif press.data == b'cancel_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
                            await conv.send_message(question_description_string, buttons=get_question_buttons())
                            break

                    else:
                        # –ï—Å–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
                        pass  # –ø–æ–ª—É—á–∞–ª–æ—Å—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —ç—Ç–æ—Ç —à–∞–≥ –ª–∏—à–Ω–∏–π, TODO —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ–ª—É—á—à–µ
                        # await conv.send_message(question_description_string, buttons=get_question_buttons())

                elif press.data == b'add_remark':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª–µ–º –∑–∞–º–µ—á–∞–Ω–∏–µ
                    remark_text = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏—è')
                    if remark_text:
                        rating_process.add_remark_to_current_question(text=remark_text)

                elif press.data == b'cancel':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –æ—Ü–µ–Ω–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
                    await conv.send_message('–û—Ü–µ–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                    await conv.cancel()

    async def _add_to_regular_queue(self):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã
        global regular_queue
        if self.telegram_id in regular_queue:
            await self.bot.send_message(self.telegram_id, '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏.')
        else:
            regular_queue.append(self.telegram_id)
            await self.bot.send_message(self.telegram_id,
                                        '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –Ω–∞–π–¥–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ ü§û')

    async def remove_from_regular_queue(self):
        global regular_queue
        if self.telegram_id in regular_queue:
            regular_queue.remove(self.telegram_id)
            await self.bot.send_message(self.telegram_id, '–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏', buttons=MAIN_MENU)
        else:
            await self.bot.send_message(self.telegram_id, '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏', buttons=MAIN_MENU)

    async def _show_lobby(self):

        game_type_buttons = [[Button.text(game_type[1], resize=True)] for game_type in GAMES_TYPES]
        game_type_buttons.append([Button.text('–ù–∞–∑–∞–¥', resize=True)])

        await self.bot.send_message(self.telegram_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:', buttons=game_type_buttons)

        async with self.bot.conversation(self.telegram_id) as conv:
            while True:
                try:
                    message_pattern = '^(' + '|'.join(game_type[1] for game_type in GAMES_TYPES) + '|–ù–∞–∑–∞–¥' + ')$'
                    response = await conv.wait_event(events.NewMessage(pattern=message_pattern))
                    if response.text == '–û–±—ã—á–Ω–∞—è':
                        await response.respond(f'–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º {response.text}.', buttons=Button.text(TG_LEAVE_QUEUE))
                        await self._add_to_regular_queue()
                        break
                    elif response.text == '–ù–∞–∑–∞–¥':
                        await conv.send_message('–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!', buttons=MAIN_MENU)
                        break
                    else:
                        await response.respond('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–∏–ø –∏–≥—Ä—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
                except asyncio.TimeoutError:
                    await conv.send_message('–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                    break

    async def play_game(self, game_process: GameProcessForUser):
        await self._show_lobby()

    async def add_question(self, adding_process: AddNewQuestionByUser):
        """
        –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –í –±—É–¥—É—â–µ–º —Å—Ç–æ–∏—Ç —Å–Ω–∞–±–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏,
        —á—Ç–æ–±—ã –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –µ–µ –≤–≤–æ–¥–∏—Ç—å.
        :param adding_process: AddNewQuestionByUser
        :return:
        """
        async with self.bot.conversation(self.telegram_id) as conv:
            category = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:')
            if category:
                question = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å:')
                if question:
                    answer = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:')
                    if answer:
                        answer_type = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:')
                        if answer_type:
                            answer_subtype = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –ø–æ–¥—Ç–∏–ø –æ—Ç–≤–µ—Ç–∞:')
                            if answer_subtype:
                                adding_process.add_question(question_text=question, question_category=category,
                                                            answer_text=answer, answer_type=answer_type,
                                                            answer_subtype=answer_subtype)
                                await conv.send_message('–°–ø–∞—Å–∏–±–æ, –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω –ø–æ–ø–∞–¥–µ—Ç –≤ –∏–≥—Ä—ã.')


class TelegramGame:

    def __init__(self, bot: TelegramClient):
        self.bot = bot

    async def _answering_to_questions(self, player):
        questions = Question.objects.all()
        answers = Answer.objects.all()
        player_score = 0

        questions_to_ask = []
        while len(questions_to_ask) < GAME_QUESTIONS_COUNT:
            buf = random.choice(questions)
            if buf in questions_to_ask:
                pass
            else:
                questions_to_ask.append(buf)

        async with self.bot.conversation(player, timeout=GAME_TIME_TO_ANSWER) as conv:
            for i in range(GAME_QUESTIONS_COUNT):
                question = questions_to_ask[i]

                answer_buttons = [[Button.text(str(question.answer))]]
                for random_answer in random.sample(list(answers), 3):
                    answer_buttons.append([Button.text(random_answer.answer)])

                random.shuffle(answer_buttons)
                await conv.send_message(str(question.question), buttons=answer_buttons)
                try:
                    response = await conv.wait_event(events.NewMessage(incoming=True, from_users=player))
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                    text = response.message.text
                    if text == str(question.answer):
                        emotion = random.choice(TG_EMOTIONS_GOOD)
                        await conv.send_message(f'–í–µ—Ä–Ω–æ! {emotion}')
                        player_score += 1
                    else:
                        emotion = random.choice(TG_EMOTIONS_BAD)
                        await conv.send_message(f"–ù–µ–≤–µ—Ä–Ω–æ {emotion},\n–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{question.answer} ")
                    time.sleep(GAME_TIME_SHOW_ANSWER)
                except asyncio.exceptions.TimeoutError:
                    await conv.send_message('–¢—ã –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤—Ä–µ–º—è –≤—ã—à–ª–æ üòû')
                    continue

            return player_score

    async def _start_regular_game(self, players: list):

        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        player_objs = []
        for player in players:
            player_obj = {'telegram_id': player, 'nickname': AuthUser.objects.get(telegram_id=player).nickname}
            player_objs.append(player_obj)

        for player_obj in player_objs:
            others_list = [player_obj_['nickname'] for player_obj_ in player_objs if
                           player_obj_['telegram_id'] != player_obj['telegram_id']]
            await self.bot.send_message(player_obj['telegram_id'],
                                        f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ {', '.join(others_list)}.")
            time.sleep(GAME_TIME_BEFORE_START)
            player_obj['task'] = asyncio.create_task(self._answering_to_questions(player_obj['telegram_id']))

        for player_obj in player_objs:
            player_score = await player_obj['task']
            player_obj['score'] = player_score

        winner = player_objs[0]
        for player_obj in player_objs[1:]:
            if player_obj['score'] > winner['score']:
                winner = player_obj

        await self.bot.send_message(winner['telegram_id'],
                                    f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–û–ë–ï–î–ê! (–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {winner["score"]})',
                                    buttons=MAIN_MENU)
        for player_obj in player_objs:
            if player_obj != winner:
                await self.bot.send_message(player_obj['telegram_id'],
                                            f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞: –ü–û–†–ê–ñ–ï–ù–ò–ï. (–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {player_obj["score"]})',
                                            buttons=MAIN_MENU)

        # –¢—É—Ç –Ω—É–∂–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–∏—Ç–∏—å –æ–ø—ã—Ç.

    async def matchmaking(self):
        tasks = []
        while True:
            if len(regular_queue) >= GAME_MAX_PLAYERS:
                players = []
                while len(players) < GAME_MAX_PLAYERS:
                    players.append(regular_queue.pop(0))
                task = asyncio.create_task(self._start_regular_game(players=players))
                tasks.append(task)
                await asyncio.gather(*tasks)
                done, _ = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
                for task in done:
                    tasks.remove(task)
            else:
                await asyncio.sleep(1)
