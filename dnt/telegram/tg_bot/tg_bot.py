from django.contrib import auth
from typing import List
from telethon.sync import TelegramClient, events
from telethon.tl.custom import Button

from authapp.models import AuthUser
from questions.operations import SettingRatingToQuestionByUser, AlreadyRemarkedByThisUser


class BotLogic:

    def __init__(self, bot: TelegramClient, telegram_id: int, telegram_username: str):
        self.bot = bot
        self.telegram_id = telegram_id
        self.telegram_username = telegram_username

    @staticmethod
    async def _get_answer_from_conv(conv: TelegramClient.conversation, question: str):
        """
        –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º –¥–∏–∞–ª–æ–≥–∞
        (–æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ—á–µ—Ç)
        """

        timeout_message = '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ'
        try:
            await conv.send_message(question)
            answer = await conv.get_response()
            return answer.text
        except Exception as e:
            await conv.send_message(timeout_message)

    @staticmethod
    def _press_event(user_id: int) -> events.CallbackQuery:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–∂–∞—Ç–æ–π –≤ –¥–∏–∞–ª–æ–≥–µ
        """
        return events.CallbackQuery(func=lambda e: e.sender_id == user_id)

    @staticmethod
    def _authorize(username: str, password: str) -> bool:
        user = auth.authenticate(username=username, password=password)
        if user:
            return True
        return False

    async def _merge_accounts(self, conv: TelegramClient.conversation) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
        - –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç—É –≤ –±–∞–∑–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π telegram id
        """

        username = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        if username:
            password = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å')
            if password:
                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã
                authorized = self._authorize(username=username, password=password)

                if authorized:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—É telegram id
                    current_user = AuthUser.objects.get(username=username)
                    current_user.telegram_id = self.telegram_id
                    current_user.save()
                    await conv.send_message(
                        f'–ê–∫–∫–∞—É–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã: login {current_user.username}, telegram_id {current_user.telegram_id}')
                else:
                    await conv.send_message(f'–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    async def _create_account(self, conv: TelegramClient.conversation) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ telegram id
        """

        new_user = AuthUser(telegram_id=self.telegram_id, username=self.telegram_username)
        new_user.save()
        await conv.send_message(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: login {new_user.username}, telegram_id {new_user.telegram_id}')

    async def send_welcome_back(self):
        await self.bot.send_message(self.telegram_id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!')

    async def create_or_merge_account(self):
        """
        –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –±–∞–∑–µ telegram id
        –∏–ª–∏ —Å–≤—è–∑–∏ telegram id —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
        """

        async with self.bot.conversation(self.telegram_id) as conv:
            buttons = [Button.inline('–î–∞, —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã', b'merge'),
                       Button.inline('–ù–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', b'create')]
            await conv.send_message('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–∞–π—Ç–µ?', buttons=buttons)

            try:
                press = await conv.wait_event(self._press_event(self.telegram_id))
                if press.data == b'merge':
                    # —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    await self._merge_accounts(conv)
                elif press.data == b'create':
                    # —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    await self._create_account(conv)
            except Exception as e:
                pass

    async def rate_questions(self, rating_process: SettingRatingToQuestionByUser):

        def get_question_buttons() -> List[Button]:
            """
            –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ inline-–∫–Ω–æ–ø–æ–∫.
            –ò—Ö —Å–æ—Å—Ç–∞–≤ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—á–∞–Ω–∏–π –≤–æ–æ–±—â–µ –∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—á–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            :return:
            """

            # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –≤–æ–ø—Ä–æ—Å–∞
            question_buttons = [Button.inline('üëç', b'like'),
                                Button.inline('üëé', b'dislike'),
                                Button.inline('üîö', b'cancel')]

            # –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            remarks = rating_process.get_remarks_for_current_question()
            if remarks:
                question_buttons.append(Button.inline(f'üëÄ {len(remarks)}', b'remarks'), )

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏–µ (–µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ
            able_to_add_remark = rating_process.ability_to_remark_question()
            if able_to_add_remark:
                question_buttons.append(Button.inline('‚úèÔ∏è', b'add_remark'))

            return question_buttons

        while rating_process.current_question:
            # –ü–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–Ω–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ü–µ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)

            question = rating_process.current_question.question
            answer = rating_process.current_question.answer.answer
            answer_type = rating_process.current_question.answer.subtype.type.name
            answer_subtype = rating_process.current_question.answer.subtype.name

            # –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            question_description_string = f'–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_type}\n–ü–æ–¥—Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {answer_subtype}'

            async with self.bot.conversation(self.telegram_id) as conv:
                await conv.send_message(question_description_string, buttons=get_question_buttons())

                press = await conv.wait_event(self._press_event(self.telegram_id))
                if press.data == b'like':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    rating_process.rate_current_question()
                    rating_process.get_next_question()

                elif press.data == b'dislike':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –∑–∞–±–∏—Ä–∞–µ–º –æ—á–∫–æ –≤–æ–ø—Ä–æ—Å—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    rating_process.rate_current_question(bad=True)
                    rating_process.get_next_question()

                elif press.data == b'remarks':
                    # –í—ã–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–º–µ—á–∞–Ω–∏—è –Ω–∞ –æ—Ü–µ–Ω–∫—É
                    for remark in rating_process.get_remarks_for_current_question():
                        remark_text = remark.text
                        remark_buttons = [Button.inline('üëç', b'like_remark'),
                                          Button.inline('üëé', b'dislike_remark'),
                                          Button.inline('üîö', b'cancel_remark')]
                        await conv.send_message(f'–ó–∞–º–µ—á–∞–Ω–∏–µ: {remark_text}', buttons=remark_buttons)

                        press = await conv.wait_event(self._press_event(self.telegram_id))
                        if press.data == b'like_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Like, –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–æ –∑–∞–º–µ—á–∞–Ω–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                            rating_process.rate_remark(remark=remark)
                            await conv.send_message('Like –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç')
                            continue
                        elif press.data == b'dislike_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Dislike, –∑–∞–±–∏—Ä–∞–µ–º –æ—á–∫–æ —É –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                            rating_process.rate_remark(remark=remark, bad=True)
                            await conv.send_message('Dislike –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç')
                            continue
                        elif press.data == b'cancel_remark':
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
                            await conv.send_message(question_description_string, buttons=get_question_buttons())
                            break

                    else:
                        # –ï—Å–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É
                        await conv.send_message(question_description_string, buttons=get_question_buttons())

                elif press.data == b'add_remark':
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª–µ–º –∑–∞–º–µ—á–∞–Ω–∏–µ
                    remark_text = await self._get_answer_from_conv(conv=conv, question='–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—á–∞–Ω–∏—è')
                    if remark_text:
                        rating_process.add_remark_to_current_question(text=remark_text)

                elif press.data == b'cancel':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –æ—Ü–µ–Ω–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
                    await conv.send_message('–û—Ü–µ–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                    await conv.cancel()
